activity_RICE_niger_delta_olojo_festival = {
	is_shown = {
		highest_held_title_tier > tier_barony
		is_landed = yes
		religion = { rice_religion_trigger_west_african_orisha_religion = yes }
	}

	can_start = {
		custom_description = {
			text = RICE_decision_ooni_exists_requirement
			exists = title:d_ooni_of_ife.holder
		}
		religion = { rice_religion_trigger_west_african_orisha_religion = yes }
		# No longer relevant as starting event is triggered on a specific date
		# custom_description = {
		# 	text = RICE_decision_olojo_festival_month_requirement
		# 	current_month >= 7
		# 	current_month <= 9
		# }
		trigger_if = {
			limit = {
				NOT = { has_title = title:d_ooni_of_ife }
			}
			# Duh
			NOT = {
				is_at_war_with = title:d_ooni_of_ife.holder
			}
		}
		# Definitely no point if they don't consider Ile-Ife holy, also to help filter out for holy site province filters
		title:b_ile-ife = {
			is_holy_site_of = root.faith
		}
	}

	can_start_showing_failures_only = {
		is_available_adult = yes
	}

	is_valid = {
		NOT = {
			has_variable = activity_invalidated
		}
		scope:host = {
			is_landed = yes
			NOT = { is_incapable = yes }
		}
		# If no one shows up
		# trigger_if = {
		# 	limit = {
		# 		is_current_phase_active = yes
		# 	}
		# 	has_attending_activity_guests = yes
		# }
		# Converting mid-activity is a big no-no.
		scope:activity = {
			OR = {
				NOT = { has_variable = starting_faith }
				# We could check whether the place you're going to is still a holy site in the new faith, but then that messes up all the people moving with you, so we just cancel the whole thing.
				scope:host.faith = var:starting_faith
			}
		}
	}

	on_invalidated = {
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
		# if = { # No one shows up
		# 	limit = {
		# 		has_attending_activity_guests = no
		# 	}
		# 	scope:activity = {
		# 		activity_type = { save_scope_as = activity_type }
		# 		activity_location = { save_scope_as = location }
		# 	}
		# 	scope:host = { trigger_event = activity_system.0100 }
		# }
		# Host converted to a different faith
		# Could check to see if new faith allows for this kind of shenanigans, but it's easier to just do it broadly like this
		if = {
			limit = {
				NOT = { scope:host.faith = var:starting_faith }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
				activity_location = { save_scope_as = location }
			}
			every_attending_character = {
				trigger_event = RICEmisc.0010
			}
		}
	}

	on_host_death = {
		scope:activity = {
			set_variable = {
				name = activity_invalidated
			}
		}
	}

	province_filter = holy_sites
	ai_province_filter = holy_sites
	wait_time_before_start = { days = 15 }

	###################
	# OPTIONS
	###################

	#special_option_category = special_type

	# I have decided not to make the gift to the Ooni an activity option
	# Because you could become Ooni, or no longer be the Ooni, in between when the activity starts and when you get to the event
	# So it's easier just not to have the option in to make the code simpler
	# options = {
	# 	#########
	# 	# GIFT TO THE OONI OPTION
	# 	#########
	# 	RICE_niger_delta_olojo_festival_gift_type = {
	# 		RICE_niger_delta_olojo_festival_gift_type_none = {
	# 			default = yes
	# 			ai_will_do = {
	# 				value = 10
	# 			}
	# 		}
	# 		RICE_niger_delta_olojo_festival_gift_type_none = {
	# 			default = yes
	# 			ai_will_do = {
	# 				value = 10
	# 			}
	# 		}
	# 		RICE_niger_delta_olojo_festival_gift_type_modest = {
	# 			ai_will_do = {
	# 				value = 10
	# 			}
	# 			cost = {
	# 				gold = {
	# 					add = {
	# 						value = 25
	# 						desc = RICE_niger_delta_olojo_festival_gift_amount
	# 					}
	# 				}
	# 			}	
	# 		}
	# 		RICE_niger_delta_olojo_festival_gift_type_great = {
	# 			ai_will_do = {
	# 				value = 10
	# 			}
	# 			cost = {
	# 				gold = {
	# 					add = {
	# 						value = 50
	# 						desc = RICE_niger_delta_olojo_festival_gift_amount
	# 					}
	# 				}
	# 			}	
	# 		}
	# 	}

	# }

	###################
	# PHASES
	###################

	phases = {
		RICE_niger_delta_olojo_festival_festival_phase = {
			is_predefined = yes
			
			on_phase_active = {
				if = {
					limit = {
						this = scope:host
					}
					# Typically happens in mid-October
					trigger_event = {
						id = niger_delta.0070
						trigger_on_next_date = 10.1
					}
				}		
			}
			on_end = {
				# Run conclusion stuff here
				# if = {
				# 	limit = { this = scope:host }
				# 	scope:activity = { progress_activity_phase_after = { weeks = 2 } }
				# }
			}
		}
	}

	max_guest_arrival_delay_time = { days = 20 }

	# desc is only shown in debug AI watch window
	ai_will_do = {
		value = 50
		
		if = {
			limit = {
				has_trait = cynical
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = zealous
			}
			add = 25
		}
		
		if = {
			limit = {
				has_trait = lazy
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = ambitious
			}
			add = 25
		}
		
		#Can you actually afford this?
		if = {
			limit = {
				NOT = { can_make_expensive_purchase_trigger = { PRICE = RICE_guanche_activity_cost } }
			}
			add = -50
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 10
		# if = {
		# 	limit = {
		# 		this = scope:host.capital_province
		# 	}
		# 	add = {
		# 		value = 30
		# 		desc = "Capital Province preferred"
		# 	}
		# }
	}
	
	is_location_valid = {
		trigger_if = {
			limit = {
				exists = barony
			}
			barony = title:b_ile-ife
		}
	}

	max_province_icons = 1
	
	cost = {
		gold = {
			add = {
				value = 0
				add = {
					value = RICE_guanche_activity_cost
					desc = hunt_base_cost
				}
			}
		}
	}

	ui_predicted_cost = {
		gold = {
			value = RICE_guanche_activity_cost

			# Make it a multiple of 5 (rounded up)
			divide = 5 
			ceiling = yes 
			multiply = 5
		}
	}
	cooldown = { days = RICE_guanche_standard_festival_cooldown_time }
	
	###################
	# ACTIVITY-SPECIFIC PULSES
	###################
	
	pulse_actions = {

	}

	# on_start = {
	# }

	on_enter_passive_state = {
		
	}

	###################
	# GUEST HANDLING
	###################

	max_guests = 30

	guest_invite_rules = {
		rules = {
			# Relations.
			2 = activity_invite_rule_lovers
			2 = activity_invite_rule_rivals_if_appropriate

			# Family.
			3 = activity_invite_rule_extended_family

			# Misc landless.
			5 = activity_invite_rule_knights

			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_friends
			1 = activity_invite_rule_close_family
			3 = activity_invite_rule_courtiers
			4 = activity_invite_rule_guests
			1 = activity_invite_spouses
		}
	}

	can_be_activity_guest = {
		faith.religion = scope:host.faith.religion
		is_adult = yes
		is_available = yes
		in_diplomatic_range = scope:host
		is_landed = no
	}

	host_intents = {
		intents = { RICE_niger_delta_olojo_festival_sacred_intent }
		default = RICE_niger_delta_olojo_festival_sacred_intent
	}

	guest_intents = {
		intents = { RICE_niger_delta_olojo_festival_sacred_intent }
		default = RICE_niger_delta_olojo_festival_sacred_intent
	}

	guest_join_chance = {
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes
	}
	
	on_complete = {
		# if = {
		# 	limit = { this = scope:host }
		# 	create_character_memory = {
		# 		type = RICE_niger_delta_olojo_festival_host_memory
		# 	}
		# 	#scope:host = {
		# 	#	RICE_niger_delta_olojo_festival_completed_log_entry_effect = yes
		# 	#}
		# }
		# else = {			
		# 	create_character_memory = {
		# 		type = RICE_niger_delta_olojo_festival_guest_memory
		# 		participants = {
		# 			host = scope:host
		# 		}
		# 	}
		# }
	}

	### Graphics
	# map_entity = {
	# 	trigger = {
	# 		activity_location.culture = {
	# 			OR = {
	# 				has_graphical_mena_culture_group_trigger = yes
	# 				has_graphical_steppe_culture_group_trigger = yes
	# 				has_graphical_african_culture_group_trigger = yes
	# 			}
	# 		}
	# 	}
	# 	reference = "building_mena_feast_01_entity"
	# }

	# map_entity = {
	# 	trigger = {
	# 		activity_location.culture = {
	# 			has_graphical_india_culture_group_trigger = yes
	# 		}
	# 	}
	# 	reference = "building_indian_feast_01_entity"
	# }
	
	# map_entity = "building_western_feast_01_entity"


	# Travel

	background = { # Unsettled, mountainous
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				NOT = { exists = province_owner }
				OR = {					
					terrain = hills
					terrain = mountains
					terrain = desert_mountains
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_nigeria_mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { # Unsettled, non-mountainous
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_dahomey_hills.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}


	background = { # Settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_benin_village.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}

	#Fallback
	background = {
		texture = "gfx/interface/illustrations/event_scenes/RICE_yoruba_shrine.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/temple_generic"
	}


	window_characters = {

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = throne_room_bow_1
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = throne_room_bow_2
			}
		}
		
		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = personality_zealous
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}
	}
}
